Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoadArgument = exports.isLoadReference = exports.isLoadFunction = void 0;
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const utils_1 = require("./utils");
function isLoadFunction(node) {
    var _a;
    node = utils_1.findTopLevelExpression(node);
    return (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === experimental_utils_1.AST_NODE_TYPES.CallExpression &&
        node.property.type === experimental_utils_1.TSESTree.AST_NODE_TYPES.Identifier &&
        node.property.name === "load");
}
exports.isLoadFunction = isLoadFunction;
function isLoadReference(node) {
    return (node.parent &&
        node.parent.type === experimental_utils_1.TSESTree.AST_NODE_TYPES.MemberExpression &&
        isLoadFunction(node.parent));
}
exports.isLoadReference = isLoadReference;
function composeObjectExpressionPropertyIntoString(objectExpression) {
    let composedProperty = "";
    objectExpression.properties.forEach((property) => {
        if (property.type === experimental_utils_1.AST_NODE_TYPES.Property) {
            if (property.key.type === experimental_utils_1.AST_NODE_TYPES.Identifier) {
                composedProperty += property.key.name;
            }
            if (property.value.type === experimental_utils_1.AST_NODE_TYPES.ObjectExpression) {
                composedProperty +=
                    "/" + composeObjectExpressionPropertyIntoString(property.value);
            }
        }
    });
    return composedProperty;
}
function getLoadArgument(node) {
    var _a;
    node = utils_1.findTopLevelExpression(node);
    if (isLoadFunction(node) &&
        ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === experimental_utils_1.TSESTree.AST_NODE_TYPES.CallExpression) {
        if (node.parent.arguments[0].type === experimental_utils_1.TSESTree.AST_NODE_TYPES.Literal) {
            return node.parent.arguments[0].value;
        }
        else if (node.parent.arguments[0].type === experimental_utils_1.TSESTree.AST_NODE_TYPES.ObjectExpression) {
            return composeObjectExpressionPropertyIntoString(node.parent.arguments[0]);
        }
    }
    throw new Error("error in getLoadArgument function.");
}
exports.getLoadArgument = getLoadArgument;
//# sourceMappingURL=load.js.map